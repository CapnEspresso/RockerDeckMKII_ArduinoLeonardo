#include <ResponsiveAnalogRead.h>
#include <MIDIUSB.h>

//----------- Pot Values -----------//

const int N_POTS = 3; //Declare how many pots are attached
int PotPin[N_POTS] = {A0, A1, A2}; //Declare where pots are attached
int PotReading[N_POTS] = {0}; //Value to store analogue read of pot value
int PotState[N_POTS] = {0}; //Value to store current state of pot
int PotPState[N_POTS] = {0}; //Value to store last state of pot
int MidiState[N_POTS] = {0}; //Value to store analogue range data (0-1023) as MIDI range data (0-128)
int MidiPState[N_POTS] = {0}; //Value to record previous MIDI state for comparison
const byte PotThreshold = 3; //Set pot value change threshold to ignore noise and interference
const int POT_TIMEOUT = 300; //Set pot timer threshold
unsigned long pPotTime[N_POTS] = {0}; //Value to store time since pot value was altered
unsigned long PotTimer[N_POTS] = {0}; //Timer counting time since pot value was last altered

//----------- Button Values -----------//

const int N_BUTTONS = 5; //Declare how many buttons are attached
int ButtonPin[N_BUTTONS] = {3, 5, 6, 9, 10}; //Declare where buttons are attached
int ButtonState[N_BUTTONS] = {0}; //Value to store current state of button
int ButtonPState[N_BUTTONS] = {0}; //Value to store last state of button
const int BUTTON_TIMEOUT = 15; //Set button timer threshold to ignore mechanical bouncing
unsigned int ButtonDebounceTime[N_BUTTONS] = {0}; //Value to store time since button was last pressed
unsigned int ButtonTimer[N_BUTTONS] = {0}; //Timer counting time since button was last pressed

//----------- MIDI Channel Declaration -----------//

byte MIDI_CH = 0; //Midi chanel used by device

//MIDI instructions for pot signals
int PotCC[N_POTS] = {11, 12, 13}; //Declare midi CC notes per pot

//MIDI instructions for button signals
int ButtonNN[N_BUTTONS] = {36, 37, 38, 39, 40}; //Declare midi note number array per button


//----------- Analog Smooth Values -----------//

float SnapMultiplier = 0.01; //Analogue read smoothing vlaue: (0.0-1.0) Increase for faster but less smooth analogue readings
ResponsiveAnalogRead ResponsivePot[N_POTS] = {}; //Assigns which ports analogue read smoother should be applied to

//----------- Setup Function -----------//

void setup() {

Serial.begin(9600); //Intitialise serial printout

for (int i = 0; i < N_BUTTONS; i++){ //For loop to assign below task to each button pin in array (prevents need to multiply task manually)
pinMode(ButtonPin[i], INPUT_PULLUP); //Add pullup resistor to each digital pin that button is attached to
}

for (int i = 0; i < N_POTS; i++){ //For loop to assign below task to each pot in array (prevents need to multiply task manually)
ResponsivePot[i] = ResponsiveAnalogRead(0, true, SnapMultiplier); //Initialise each instance of smoother
ResponsivePot[i].setAnalogResolution(1023); //Set resolution of analog read
}
}

//----------- Loop Function -----------//

void loop() {

PotValChange(); //Call Pot Function
ButtonPress(); //Call Button Function

}

//----------- Functions -----------//

//----------- Midi Note On Function MIDIUSB Library -----------//

void noteOn(byte channel, byte pitch, byte velocity) {
  midiEventPacket_t noteOn = {0x09, 0x90 | channel, pitch, velocity};
  MidiUSB.sendMIDI(noteOn);
}
//----------- MIDI Note Off Function MIDIUSB Library -----------//

void noteOff(byte channel, byte pitch, byte velocity) {
  midiEventPacket_t noteOff = {0x08, 0x80 | channel, pitch, velocity};
  MidiUSB.sendMIDI(noteOff);
}
//----------- MIDI CC control send Function MIDIUSB Library -----------//

void controlChange(byte channel, byte control, byte value) {
  midiEventPacket_t event = {0x0B, 0xB0 | channel, control, value};
  MidiUSB.sendMIDI(event);
}
//----------- Pot Function -----------//

void PotValChange(){
for(int i = 0; i < N_POTS; i++) { //For loop to assign below task to each pot (prevents need to multiply task manually)
PotReading[i] = analogRead(PotPin[i]); //Store analogue read integer as value "PotReading"
ResponsivePot[i].update(PotReading[i]); //Use smoothing value to update the PotReading integer
  PotState[i] = ResponsivePot[i].getValue(); //Get value for "PotState" from value of "PotReading" integer
  MidiState[i] = map(PotState[i], 0, 1023, 0, 128); //Convert range from analog voltage value range to MIDI value range and map values
  int PotVar = abs(PotState[i] - PotPState[i]); //Calculate pot variation: subtract current cycle state from previous cycle state
//Create value gate to allow recording of all steps in pot value change, whilst preventing noise in between intensional value changes:
if (PotVar > PotThreshold) { //If variation is bigger than stated threshold 
  pPotTime[i] = millis(); //Then begin recording time to know how much time has passed since threshold was passed
}
PotTimer[i] = millis() - pPotTime[i]; //Store value of time passed since threshold opened as an integer named "PotTimer"
if (PotTimer[i] < POT_TIMEOUT) { //If PotTimer Value is less than the declared pot timer threshold
 if (MidiState[i] != MidiPState[i]){ //Then wait for MIDI value to change
  //Send Resulting Value as MIDI Data
  controlChange(MIDI_CH, PotCC[i], MidiState[i]);
  MidiUSB.flush();
//Serial print pot value readout
  Serial.print("Pot ");
  Serial.print(i);
  Serial.print("  |  ");
  Serial.print("PotState: ");
  Serial.print(PotState[i]);
  Serial.print(" - MidiState: ");
  Serial.println(MidiState[i]);
//Record previous midi state as integer
  MidiPState[i] = MidiState[i];
}
//Record previous pot state as integer
PotPState[i] = PotState[i];
  }
 }
}

//----------- Button Press Function -----------//

void ButtonPress(){
for (int i = 0; i < N_BUTTONS; i++){ //For loop to array button pins for N number of declared buttons
ButtonState[i] = digitalRead(ButtonPin[i]); //Read voltage of button pin and store as "Button State"
ButtonTimer[i] = millis() - ButtonDebounceTime[i]; //Calculate how much time has passed since last button press
if (ButtonTimer[i] > BUTTON_TIMEOUT){ //Continue after declared button timer threshold is passed
if (ButtonState[i] != ButtonPState[i]){ //Continue if button is pressed or let go of
ButtonDebounceTime[i] = millis(); //Store time since button value last changed to "resart" button timer
  if (ButtonState[i] == LOW){ //If button is being depressed
    noteOn(MIDI_CH, ButtonNN[i], 127); //Then send data to declared MIDI USB channel, at MIDI note associated with button in array, at full velocity
    MidiUSB.flush(); //And clear MIDI channel after signal is sent
  //Serial print button value readout
   Serial.print("Button ");
   Serial.print(i);
   Serial.println(" = On");}
   else { //Or if button is not being depresssed
    noteOn(MIDI_CH, ButtonNN[i], 0); //Then send data to declared MIDI USB channel, at MIDI note associated with button in array, at 0 velocity
    MidiUSB.flush(); //And clear MIDI channel after signal is sent
   Serial.print("Button ");
   Serial.print(i);
   Serial.println(" = Off");}
  ButtonPState[i] = ButtonState[i];
   }
  }
 }
}
